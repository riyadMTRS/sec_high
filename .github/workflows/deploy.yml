<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecureCommunity - Supabase + GitHub Pages</title>
    <style>
        /* CSS styles from previous implementation */
        :root {
            --primary-color: #3ecf8e;
            --secondary-color: #2b825b;
            --bg-color: #f0f2f5;
            --card-bg: white;
            --border-color: #dddfe2;
            --text-color: #1c1e21;
            --error-color: #e74c3c;
            --success-color: #27ae60;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 25px;
            text-align: center;
        }
        
        .content {
            padding: 30px;
        }
        
        .card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
            border-left: 4px solid var(--primary-color);
        }
        
        .step {
            display: flex;
            margin-bottom: 25px;
            align-items: flex-start;
        }
        
        .step-number {
            background: var(--primary-color);
            color: white;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 18px;
            flex-shrink: 0;
            font-weight: bold;
            font-size: 18px;
        }
        
        .code-block {
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 18px;
            border-radius: 8px;
            overflow-x: auto;
            margin: 20px 0;
            font-family: 'Fira Code', monospace;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .btn {
            display: inline-block;
            padding: 14px 25px;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            margin: 10px 10px 10px 0;
            text-align: center;
            text-decoration: none;
        }
        
        .btn:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        
        .instructions {
            background: #e3f2fd;
            padding: 25px;
            border-radius: 8px;
            margin: 30px 0;
        }
        
        @media (max-width: 768px) {
            .step {
                flex-direction: column;
            }
            
            .step-number {
                margin-bottom: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>SecureCommunity Deployment Guide</h1>
            <p>Supabase + GitHub Pages Implementation</p>
        </header>

        <div class="content">
            <div class="card">
                <h2>GitHub Pages Deployment</h2>
                <p>To deploy your SecureCommunity site to GitHub Pages, follow these steps:</p>
                
                <div class="instructions">
                    <div class="step">
                        <div class="step-number">1</div>
                        <div>
                            <h3>Create the workflows directory</h3>
                            <p>In your repository, create the following directory structure:</p>
                            <div class="code-block">
.github/
└── workflows/
    └── deploy.yml
                            </div>
                        </div>
                    </div>
                    
                    <div class="step">
                        <div class="step-number">2</div>
                        <div>
                            <h3>Add the deployment workflow</h3>
                            <p>Copy the following YAML code into <code>.github/workflows/deploy.yml</code>:</p>
                            <div class="code-block">
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
                            </div>
                        </div>
                    </div>
                    
                    <div class="step">
                        <div class="step-number">3</div>
                        <div>
                            <h3>Enable GitHub Pages</h3>
                            <p>In your GitHub repository settings:</p>
                            <ol>
                                <li>Go to <strong>Settings</strong> → <strong>Pages</strong></li>
                                <li>Select <strong>GitHub Actions</strong> as the source</li>
                                <li>Your site will be deployed automatically on each push to main</li>
                            </ol>
                        </div>
                    </div>
                    
                    <div class="step">
                        <div class="step-number">4</div>
                        <div>
                            <h3>Configure Supabase</h3>
                            <p>Update your Supabase configuration with these steps:</p>
                            <ol>
                                <li>Go to your Supabase project settings</li>
                                <li>Find your Project URL and API Key</li>
                                <li>Update the JavaScript code in your HTML file:</li>
                            </ol>
                            <div class="code-block">
// Replace with your actual Supabase URL and Key
const SUPABASE_URL = 'https://your-project.supabase.co';
const SUPABASE_ANON_KEY = 'your-anon-key';

// Initialize Supabase
const supabase = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                            </div>
                        </div>
                    </div>
                </div>
                
                <h3>Your Site URL</h3>
                <p>Once deployed, your site will be available at:</p>
                <div class="code-block">
https://[your-username].github.io/[repository-name]/
                </div>
                
                <a href="#" class="btn">View Demo Deployment</a>
                <a href="#" class="btn">Download Complete Code</a>
            </div>
            
            <div class="card">
                <h2>Supabase Setup Instructions</h2>
                <p>For your SecureCommunity app to work properly, you need to set up your Supabase project correctly:</p>
                
                <div class="step">
                    <div class="step-number">1</div>
                    <div>
                        <h3>Database Schema</h3>
                        <p>Run this SQL in the Supabase SQL editor to create the necessary tables:</p>
                        <div class="code-block">
-- Create profiles table
CREATE TABLE profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  points INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Create posts table
CREATE TABLE posts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES profiles(id) NOT NULL,
  content TEXT,
  image_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view all profiles" ON profiles FOR SELECT USING (true);
CREATE POLICY "Users can update own profile" ON profiles FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Users can view all posts" ON posts FOR SELECT USING (true);
CREATE POLICY "Users can create posts" ON posts FOR INSERT WITH CHECK (auth.uid() = user_id);
                        </div>
                    </div>
                </div>
                
                <div class="step">
                    <div class="step-number">2</div>
                    <div>
                        <h3>Authentication Settings</h3>
                        <p>Configure authentication in your Supabase project:</p>
                        <ol>
                            <li>Go to Authentication → Settings</li>
                            <li>Add your GitHub Pages URL to "Site URL"</li>
                            <li>Add your GitHub Pages URL to "Redirect URLs"</li>
                            <li>Enable email authentication provider</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // This is a simplified version of the Supabase initialization
        // In your actual implementation, you would include the full SDK
        console.log("Supabase would be initialized here");
        
        // Example of how to initialize Supabase
        /*
        const SUPABASE_URL = 'https://your-project.supabase.co';
        const SUPABASE_ANON_KEY = 'your-anon-key';
        const supabase = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        */
    </script>
</body>
</html>
